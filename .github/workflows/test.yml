name: Terraform Tests

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - 'test/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - '**.tf'
      - 'test/**'
      - '.github/workflows/test.yml'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform-format:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.4"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: false

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.4"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          quiet: false
          soft_fail: true
          output_format: cli,sarif
          output_file_path: console,results.sarif

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: results.sarif
          retention-days: 30

  lint:
    name: TFLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Initialize TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint --format compact

  test-examples:
    name: Test Examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        example:
          - default
          - demo
          - nullvars
          - with-resource-type
    env:
      ARM_CLIENT_ID: ${{ secrets.INFOEX_SBX_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.INFOEX_SBX_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.INFOEX_SBX_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.INFOEX_SBX_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.4"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: examples/${{ matrix.example }}
        run: terraform init

      - name: Terraform Validate
        working-directory: examples/${{ matrix.example }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: examples/${{ matrix.example }}
        run: terraform plan -out=tfplan

      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.example }}
          path: examples/${{ matrix.example }}/tfplan

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      - terraform-format
      - terraform-validate
      - security-scan
      - lint
      - test-examples
    if: always()
    steps:
      - name: Check test results
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Format | ${{ needs.terraform-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Validate | ${{ needs.terraform-validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TFLint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Examples | ${{ needs.test-examples.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Evaluate overall result
        if: |
          needs.terraform-format.result != 'success' ||
          needs.terraform-validate.result != 'success' ||
          needs.test-examples.result != 'success'
        run: |
          echo "::error::One or more required tests failed"
          exit 1

  comment-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [terraform-format, terraform-validate, security-scan, lint, test-examples, test-summary]
    if: github.event_name == 'pull_request' && always()
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        env:
          FORMAT_RESULT: ${{ needs.terraform-format.result }}
          VALIDATE_RESULT: ${{ needs.terraform-validate.result }}
          SECURITY_RESULT: ${{ needs.security-scan.result }}
          LINT_RESULT: ${{ needs.lint.result }}
          EXAMPLES_RESULT: ${{ needs.test-examples.result }}
          SUMMARY_RESULT: ${{ needs.test-summary.result }}
        with:
          script: |
            const formatIcon = process.env.FORMAT_RESULT === 'success' ? '✅' : '❌';
            const validateIcon = process.env.VALIDATE_RESULT === 'success' ? '✅' : '❌';
            const securityIcon = process.env.SECURITY_RESULT === 'success' ? '✅' : '❌';
            const lintIcon = process.env.LINT_RESULT === 'success' ? '✅' : '❌';
            const examplesIcon = process.env.EXAMPLES_RESULT === 'success' ? '✅' : '❌';
            const summaryIcon = process.env.SUMMARY_RESULT === 'success' ? '✅' : '❌';

            const summary = `## Terraform Tests ${summaryIcon}

            All automated tests have completed. Check the workflow run for details.

            - Format Check: ${formatIcon}
            - Validation: ${validateIcon}
            - Security Scan: ${securityIcon}
            - Linting: ${lintIcon}
            - Example Tests: ${examplesIcon}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
